let map;
let watchId = null;

async function getLocation() {
  return new Promise((resolve, reject) => {
    if (navigator.geolocation) {
      watchId = navigator.geolocation.watchPosition(
        (position) => {
          stopLocationTracking(); // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î

          resolve({
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
          });
              const Toast = Swal.mixin({
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 1500,
            timerProgressBar: true,
            didOpen: (toast) => {
              toast.onmouseenter = Swal.stopTimer;
              toast.onmouseleave = Swal.resumeTimer;
            }
          });
          Toast.fire({
            icon: "success",
            title: "‡∏û‡∏£‡πâ‡∏≠‡∏°"
          });
          
          alertUpdate();
        },
        (error) => {
          stopLocationTracking();
          reject(error);
          alertUpdate();
          showError(error);
        }
      );
    } else {
      stopLocationTracking();
      Swal.fire({
        icon: "error",
        title: "‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Geolocation",
        text: "‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Geolocation ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏∑‡πà‡∏ô",
        footer:
          '<a href="https://www.google.com/chrome/" target="_blank">‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î Chrome</a>',
      });

      reject(new Error("Geolocation is not supported by this browser."));
    }
  });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î
function stopLocationTracking() {
  if (watchId !== null) {
    navigator.geolocation.clearWatch(watchId);
    watchId = null;
  }
}



function showError(error) {
  let title = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î";
  let text = "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
  let footer = "";

  switch (error.code) {
    case error.PERMISSION_DENIED:
      title = "‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò";
      text =
        "‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ";
      // footer =
      //   '<a href="chrome://settings/content/location" target="_blank">‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</a>';
      break;
    case error.POSITION_UNAVAILABLE:
      title = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á";
      text = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
      break;
    case error.TIMEOUT:
      title = "‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•";
      text = "‡∏Å‡∏≤‡∏£‡∏£‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
      break;
    case error.UNKNOWN_ERROR:
      title = "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î";
      text =
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÑ‡∏î‡πâ ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á";
      break;
  }

  Swal.fire({
    icon: "error",
    title,
    text,
    footer,
    allowOutsideClick: false,
  }).then((result) => {
    if (result.isConfirmed) location.reload();
  });
}

async function initializeMap(
  lat,
  lon,
  destinationLat,
  destinationLon,
  officer
) {
  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà
  map = L.map("map").setView([lat, lon], 12);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 
// ‚úÖ 1. OpenStreetMap (OSM)
var osm = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
  attribution: '&copy; OpenStreetMap contributors'
});

// ‚úÖ 2. OpenTopoMap
var opentopomap = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
  attribution: '&copy; OpenTopoMap contributors',
  maxZoom: 17
});

// ‚úÖ 3. Google Maps
var googleMaps = L.tileLayer('https://mt1.google.com/vt/lyrs=m&x={x}&y={y}&z={z}', {
  attribution: '&copy; Google Maps'
});

// ‚úÖ 4. CartoDB (Light)
var cartoLight = L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}{r}.png', {
  attribution: '&copy; CartoDB'
});

// ‚úÖ 5. ESRI World Imagery
var esriImagery = L.tileLayer('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', {
  attribution: '&copy; Esri & NASA'
});

// üìå ‡πÄ‡∏•‡πÄ‡∏¢‡∏≠‡∏£‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å
var baseMaps = {
  "OpenStreetMap": osm,
  "OpenTopoMap": opentopomap,
  "Google Maps": googleMaps,
  "CartoDB Light": cartoLight,
  "ESRI World Imagery": esriImagery
};

   // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÉ‡∏ô localStorage ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   var savedMap = localStorage.getItem('selectedMap');

   // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πâ‡∏ô
   if (savedMap) {
       baseMaps[savedMap].addTo(map);
   } else {
       // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ OpenStreetMap ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
       osm.addTo(map);
   }

// üìå ‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
L.control.layers(baseMaps).addTo(map);

     // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ô localStorage
     map.on('baselayerchange', function(e) {
      var selectedMap = e.name;
      localStorage.setItem('selectedMap', selectedMap);
  });
  
  const userLatLng = L.latLng(lat, lon);
  const destinationLatLng = L.latLng(destinationLat, destinationLon);

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á
  const distanceInMeters = userLatLng.distanceTo(destinationLatLng);
  const distanceInKilometers = (distanceInMeters / 1000).toFixed(2);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏±‡∏®‡∏°‡∏µ
  L.circle([destinationLat, destinationLon], {
    color: "green",
    fillColor: "#0f0",
    fillOpacity: 0.2,
    radius: 10000,
  })
    .addTo(map)
    .bindPopup("‡∏£‡∏±‡∏®‡∏°‡∏µ 10 ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£ ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì");

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Marker ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
  L.marker([destinationLat, destinationLon])
    .addTo(map)
    .bindPopup(`${officer}`)
    .openPopup();

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° Marker ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  L.marker([lat, lon])
    .addTo(map)
    .bindPopup(
      `<b>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</b><br>‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á: ${distanceInKilometers} ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£`
    )
    .openPopup();

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
  const latlngs = [
    [lat, lon],
    [destinationLat, destinationLon],
  ];
  L.polyline(latlngs, { color: "blue" })
    .addTo(map)
    .bindPopup(
      `
    <b>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</b><br>
    ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å ${officer} : ${distanceInKilometers} ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
  `
    )
    .openPopup();

    function calculateAQI(pm25) {
      if (pm25 <= 25) {
        return {
          aqi: Math.round((25 / 25) * pm25),
          level: "‡∏î‡∏µ‡∏°‡∏≤‡∏Å",
          color: "#007FFE",
        }; // ‡∏ü‡πâ‡∏≤
      } else if (pm25 <= 37) {
        return {
          aqi: Math.round(((50 - 26) / (37 - 26)) * (pm25 - 26) + 26),
          level: "‡∏î‡∏µ",
          color: "#008000",
        }; // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
      } else if (pm25 <= 50) {
        return {
          aqi: Math.round(((100 - 51) / (50 - 38)) * (pm25 - 38) + 51),
          level: "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á",
          color: "#C09200",
        }; // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
      } else if (pm25 <= 90) {
        return {
          aqi: Math.round(((200 - 101) / (90 - 51)) * (pm25 - 51) + 101),
          level: "‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û",
          color: "#E2543C",
        }; // ‡∏™‡πâ‡∏°
      } else if (pm25 <= 150) {
        return {
          aqi: Math.round(((300 - 201) / (150 - 91)) * (pm25 - 91) + 201),
          level: "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢",
          color: "#FF0000",
        }; // ‡πÅ‡∏î‡∏á
      } else if (pm25 <= 250) {
        return {
          aqi: Math.round(((400 - 301) / (250 - 151)) * (pm25 - 151) + 301),
          level: "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏°‡∏≤‡∏Å",
          color: "#800000",
        }; // ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•
      } else {
        return {
          aqi: Math.round(((500 - 401) / (pm25 - 251)) * (pm25 - 251) + 401),
          level: "‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï",
          color: "#660000",
        }; // ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏°
      }
    }
    

  function getTemperatureLevel(temp) {
    if (temp >= 45) {
      return { level: "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î‡∏°‡∏≤‡∏Å", color: "#8B0000" }; // Very Extremely Hot (‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏°‡∏≤‡∏Å)
    } else if (temp >= 40) {
      return { level: "‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î", color: "#B22222" }; // Very Hot (‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°)
    } else if (temp >= 37) {
      return { level: "‡∏£‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å", color: "#FF4500" }; // Extremely Hot (‡πÅ‡∏î‡∏á‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏°)
    } else if (temp >= 35) {
      return { level: "‡∏£‡πâ‡∏≠‡∏ô", color: "#FF8C00" }; // Hot (‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏°)
    } else if (temp >= 30) {
      return { level: "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏£‡πâ‡∏≠‡∏ô", color: "#FFA500" }; // Warm (‡∏™‡πâ‡∏°)
    } else if (temp >= 23) {
      return { level: "‡∏õ‡∏Å‡∏ï‡∏¥", color: "#228B22" }; // Normal (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°)
    } else if (temp >= 20) {
      return { level: "‡πÄ‡∏¢‡πá‡∏ô‡∏™‡∏ö‡∏≤‡∏¢", color: "#32CD32" }; // Pleasantly Cool (‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏î)
    } else if (temp >= 18) {
      return { level: "‡πÄ‡∏¢‡πá‡∏ô", color: "#1E90FF" }; // Cool (‡∏ü‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏°)
    } else if (temp >= 16) {
      return { level: "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏≤‡∏ß", color: "#4682B4" }; // Moderately Cold (‡∏ü‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô)
    } else if (temp >= 8) {
      return { level: "‡∏´‡∏ô‡∏≤‡∏ß", color: "#00008B" }; // Cold (‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°)
    } else if (temp >= 5) {
      return { level: "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î", color: "#800080" }; // Very Cold (‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏°)
    } else {
      return { level: "‡∏´‡∏ô‡∏≤‡∏ß‡∏à‡∏±‡∏î‡∏°‡∏≤‡∏Å", color: "#4B0082" }; // Extremely Cold (‡∏°‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°‡∏°‡∏≤‡∏Å)
    }
  }

  try {
    const apiKey = "639b4c8c49d8ae3d835971a444856be5";
    const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric&lang=th`;
    const airQualityUrl = `https://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${apiKey}`;

    // Fetch weather data
    const weatherResponse = await fetch(weatherUrl);
    const weatherData = await weatherResponse.json();

    // Fetch air quality data
    const airQualityResponse = await fetch(airQualityUrl);
    const airQualityData = await airQualityResponse.json();

    const weatherDescription = weatherData.weather[0].description;
    const weatherIcon = weatherData.weather[0].icon;
    const weatherTemp = weatherData.main.temp;
    const weatherName = weatherData.name;
    const weatherImageUrl = `https://openweathermap.org/img/wn/${weatherIcon}.png`;

    const pm25 = airQualityData.list[0].components.pm2_5;
    const { aqi, level: aqiLevel, color: aqiColor } = calculateAQI(pm25);
    const { level: tempLevel, color: tempColor } =
      getTemperatureLevel(weatherTemp);

    const googleMapUrl = `https://www.google.co.th/maps/dir/${destinationLat},${destinationLon}/${lat},${lon}`;

    // Add weather, AQI, and PM2.5 information in user location popup
    L.marker([lat, lon])
      .addTo(map)
      .bindPopup(
        `
      <div class="popup-content">
        <b>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</b><br>
        <a href="${googleMapUrl}" target="_blank">${lat}, ${lon}</a><br>
        <span class="secondary-text">‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å ${officer}:<b> ${distanceInKilometers}</b> ‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£</span><br>
        <img src="${weatherImageUrl}" alt="Weather Icon"><br>
        <span class="weather-info">${weatherName}, ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${weatherTemp}¬∞C</span> 
        <span style="color: ${tempColor};"><b>(${tempLevel})</b></span><br>
        <span class="secondary-text">‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: ${weatherDescription}</span><br>
        <span class="secondary-text">PM2.5: ${pm25} ¬µg/m¬≥</span><br>
        AQI: <span class="aqi" style="color: ${aqiColor};">${aqi} (${aqiLevel})</span>
      </div>
      `
      )
      .openPopup();
  } catch (error) {
    console.error("Error fetching weather or air quality data: ", error);
  }
}

async function checkonmap() {
  const mapContainer = document.getElementById("map");
  mapContainer.innerHTML = ""; // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡∏≠‡∏á div ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏´‡∏•‡∏î
  const loadingText = document.createElement("p");
  loadingText.textContent = "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà...";
  loadingText.style.textAlign = "center";
  loadingText.style.color = "blue"; // Set text color here
  mapContainer.appendChild(loadingText);

  try {
    const location = await getLocation();
    const lat = location.latitude;
    const lon = location.longitude;

    const destinationLat = parseFloat(localStorage.getItem("oflat"));
    const destinationLon = parseFloat(localStorage.getItem("oflong"));
    const officer = localStorage.getItem("office") || "‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô";

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô initializeMap
    displayLatLon(lat, lon);
    initializeMap(lat, lon, destinationLat, destinationLon, officer);
  } catch (error) {
    console.error("Error displaying map: ", error);
    mapContainer.innerHTML = `<p style="text-align: center; color: red;">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ: ${error.message}</p>`;
  }
}

checkonmap();

function refreshMap() {
  const mainContent = document.getElementById("mainContent");
  const showHideButton = document.getElementById("showHide");

  // Check if mainContent is collapsed
  const isCollapsed = mainContent.classList.contains("collapsed");

  if (isCollapsed) {
    // If collapsed, show the content and change button text
    mainContent.classList.remove("collapsed"); // Show the content
    showHideButton.textContent = "‡∏¢‡πà‡∏≠"; // Change button text to 'Hide'

    // Update localStorage with the new state
    localStorage.setItem("containerCollapsed", "false");

    // Call checkonmap() to reload the map if shown
    if (map) {
      map.remove(); // Properly remove the existing map instance
    }
    checkonmap();
  } else {
    // If not collapsed, refresh the map properly
    if (map) {
      map.remove(); // Remove the old map
    }
    checkonmap(); // Reinitialize the map
  }
}

function displayLatLon(lat, lon) {
  // Set the values to the hidden input fields
  document.getElementById("llat").value = lat;
  document.getElementById("llon").value = lon;
}

// in-out-old
// async function checkin() {
//   let latitude = document.querySelector("#llat").value;
//   let longitude = document.querySelector("#llon").value;

//   if (!latitude || !longitude) {
//     Swal.fire({
//       icon: "warning",
//       title: "‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
//       html: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n‡∏´‡∏≤‡∏Å‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏Å‡∏ô QR-code ‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ',
//       confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
//       allowOutsideClick: false,
//       customClass: {
//         title: "text-warning",
//         content: "text-muted",
//         confirmButton: "btn btn-warning",
//       },
//     });
//     return; // Exit the function if required values are missing
//   }

//   Swal.fire({
//     title: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
//     html: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
//     showCancelButton: true,
//     confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
//     cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
//     allowOutsideClick: false,
//     cancelButtonColor: "#6F7378",
//     customClass: {
//       title: "text-success",
//       content: "text-muted",
//       confirmButton: "btn btn-success",
//     },
//     didOpen: async () => {
//       Swal.getConfirmButton().addEventListener("click", async () => {
//         await processCheckinOrCheckout("In", latitude, longitude);
//       });
//     },
//   });
// }

// async function checkout() {
//   let latitude = document.querySelector("#llat").value;
//   let longitude = document.querySelector("#llon").value;

//   if (!latitude || !longitude) {
//     Swal.fire({
//       icon: "warning",
//       title: "‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
//       html: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n‡∏´‡∏≤‡∏Å‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏Å‡∏ô QR-code ‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ',
//       confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
//       allowOutsideClick: false,
//       customClass: {
//         title: "text-warning",
//         content: "text-muted",
//         confirmButton: "btn btn-warning",
//       },
//     });
//     return;
//   }

//   Swal.fire({
//     title: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
//     html: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
//     showCancelButton: true,
//     confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
//     cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
//     allowOutsideClick: false,
//     cancelButtonColor: "#6F7378",
//     customClass: {
//       title: "text-danger",
//       content: "text-muted",
//       confirmButton: "btn btn-danger",
//     },
//     didOpen: async () => {
//       Swal.getConfirmButton().addEventListener("click", async () => {
//         await processCheckinOrCheckout("Out", latitude, longitude);
//       });
//     },
//   });
// }

// in-out-new
async function checkin() {
  let latitude = document.querySelector("#llat").value;
  let longitude = document.querySelector("#llon").value;

  if (!latitude || !longitude) {
    Swal.fire({
      icon: "warning",
      title: "‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
      html: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á<br>‡∏´‡∏≤‡∏Å‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏Å‡∏ô QR-code ‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ',
      confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      allowOutsideClick: false,
      customClass: {
        title: "text-warning",
        content: "text-muted",
        confirmButton: "btn btn-warning",
      },
    });
    return;
  }

  let now = new Date();
  let hour = now.getHours();
  let minute = now.getMinutes().toString().padStart(2, "0"); // ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏•‡∏±‡∏Å ‡πÄ‡∏ä‡πà‡∏ô 05 ‡πÅ‡∏ó‡∏ô 5
  let currentTime = `${hour}:${minute}`;

  if (hour >= 0 && hour < 5) {
    Swal.fire({
      icon: "warning",
      title: `‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${currentTime} ‡∏ô.`,
      html: "‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏•‡∏≤‡∏á‡∏î‡∏∂‡∏Å ‡∏ü‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏∑‡∏î‡∏≠‡∏¢‡∏π‡πà üåô<br>‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠?",
      showCancelButton: true,
      confirmButtonText: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      allowOutsideClick: false,
      cancelButtonColor: "#6F7378",
      customClass: {
        title: "text-danger",
        content: "text-muted",
        confirmButton: "btn btn-danger",
      },
    }).then((result) => {
      if (result.isConfirmed) {
        showCheckinConfirmation(latitude, longitude);
      }
    });
  } else {
    showCheckinConfirmation(latitude, longitude);
  }
}

async function showCheckinConfirmation(latitude, longitude) {
  Swal.fire({
    title: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    html: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
    showCancelButton: true,
    confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
    cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    allowOutsideClick: false,
    cancelButtonColor: "#6F7378",
    customClass: {
      title: "text-success",
      content: "text-muted",
      confirmButton: "btn btn-success",
    },
    didOpen: async () => {
      Swal.getConfirmButton().addEventListener("click", async () => {
        await processCheckinOrCheckout("In", latitude, longitude);
      });
    },
  });
}


async function checkout() {
  let latitude = document.querySelector("#llat").value;
  let longitude = document.querySelector("#llon").value;

  if (!latitude || !longitude) {
    Swal.fire({
      icon: "warning",
      title: "‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå",
      html: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á<br>‡∏´‡∏≤‡∏Å‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏ó‡πà‡∏≤‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏Å‡∏ô QR-code ‡∏à‡∏≤‡∏Å‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ',
      confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      allowOutsideClick: false,
      customClass: {
        title: "text-warning",
        content: "text-muted",
        confirmButton: "btn btn-warning",
      },
    });
    return;
  }

  let now = new Date();
  let hour = now.getHours();
  let minute = now.getMinutes().toString().padStart(2, "0");
  let currentTime = `${hour}:${minute}`;

  if (hour >= 19 && hour <= 23) {
    Swal.fire({
      icon: "info",
      title: `‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÄ‡∏ß‡∏•‡∏≤ ${currentTime} ‡∏ô.`,
      html: "‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏Ñ‡πà‡∏≥ ‡∏ü‡πâ‡∏≤‡∏°‡∏∑‡∏î‡πÅ‡∏•‡πâ‡∏ß üåô<br>‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
      showCancelButton: true,
      confirmButtonText: "‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠",
      cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
      allowOutsideClick: false,
      cancelButtonColor: "#6F7378",
      customClass: {
        title: "text-primary",
        content: "text-muted",
        confirmButton: "btn btn-primary",
      },
    }).then((result) => {
      if (result.isConfirmed) {
        showCheckoutConfirmation(latitude, longitude);
      }
    });
  } else {
    showCheckoutConfirmation(latitude, longitude);
  }
}

async function showCheckoutConfirmation(latitude, longitude) {
  Swal.fire({
    title: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
    html: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
    showCancelButton: true,
    confirmButtonText: "‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô",
    cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
    allowOutsideClick: false,
    cancelButtonColor: "#6F7378",
    customClass: {
      title: "text-danger",
      content: "text-muted",
      confirmButton: "btn btn-danger",
    },
    didOpen: async () => {
      Swal.getConfirmButton().addEventListener("click", async () => {
        await processCheckinOrCheckout("Out", latitude, longitude);
      });
    },
  });
}

async function generateSecureCode() {
  const date = new Date();
  const data = `${date.getFullYear()}${date.getMonth() + 1}${date.getDate()}`;
  const secretKey = "Impermanent_Suffering_Egolessness";

  const encoder = new TextEncoder();
  const key = await crypto.subtle.importKey(
    "raw",
    encoder.encode(secretKey),
    { name: "HMAC", hash: "SHA-256" },
    false,
    ["sign"]
  );
  const signature = await crypto.subtle.sign("HMAC", key, encoder.encode(data));
  const code = Array.from(new Uint8Array(signature))
    .map((b) => b.toString(16).padStart(2, "0"))
    .join("");
  return code;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
async function processCheckinOrCheckout(ctype, latitude, longitude,staff) {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ localStorage ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const uuid = localStorage.getItem("uuid");
    const cidhash = localStorage.getItem("cidhash");
    const userid = localStorage.getItem("userid");
    const name = localStorage.getItem("name");
    const mainsub = localStorage.getItem("mainsub");
    const office = localStorage.getItem("office");
    const latx = localStorage.getItem("oflat");
    const longx = localStorage.getItem("oflong");
    const db1 = localStorage.getItem("db1");
    const token = localStorage.getItem("token");
    const docno = localStorage.getItem("docno");
    const job = localStorage.getItem("job");
    const boss = localStorage.getItem("boss");
    const ceo = localStorage.getItem("ceo");
    const refid = localStorage.getItem("refid");
    const chatId = localStorage.getItem("chatId");

    if (!refid || !cidhash || !userid || !name) {
      throw new Error(
        "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà"
      );
    }

    const secureCode = await generateSecureCode();
    let typea = document.querySelector("#typea").value || '‡∏õ‡∏Å‡∏ï‡∏¥';
    let nte = document.querySelector("#otherDetails").value || (typeof staff !== 'undefined' ? staff : '');

    if (typea === "‡∏≠‡∏∑‡πà‡∏ô‡πÜ" && !nte) {
      throw new Error("‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏");
    }

    let todays = new Date();
    todays.toLocaleString("th-TH", { timeZone: "Asia/Bangkok" });
    let todayx = todays.toLocaleTimeString("th-TH");

    Swal.fire({
      title: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...<br>‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•",
      allowOutsideClick: false,
      didOpen: () => {
        Swal.showLoading();
      },
    });

    const response = await fetch(
      `https://script.google.com/macros/s/AKfycbzqlvr7DeGl7rOB5hGVSMnUKdTAo3ddudvxzv4xNWgSq-rrnvgP-3EodZQ1iIUdXsfz/exec?ctype=${ctype}&uuid=${uuid}&cidhash=${cidhash}&userid=${userid}&name=${name}&mainsub=${mainsub}&office=${office}&latx=${latx}&longx=${longx}&db1=${db1}&boss=${boss}&ceo=${ceo}&lat=${latitude}&long=${longitude}&typea=${typea}&nte=${nte}&stampx=${todayx}&refid=${refid}&token=${token}&job=${job}&docno=${docno}&secureCode=${secureCode}&chatId=${chatId}`
    );

    if (!response.ok) {
      throw new Error(`Failed to process: ${response.statusText}`);
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API
    const data = await response.json();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô data.res ‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á Swal
    data.res.forEach((datas) => {
      // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î
      Swal.close();

      let iconx = datas.icon;
      let header = datas.header;
      let text = datas.text;

      Swal.fire({
        icon: iconx || "success", // ‡πÉ‡∏ä‡πâ icon ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ "success" ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        title: header,
        text: data.message || text, // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å API ‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ entry
        confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
        allowOutsideClick: false,
        customClass: {
          title:
            iconx === "success"
              ? "text-success"
              : iconx === "error"
              ? "text-danger"
              : iconx === "warning"
              ? "text-warning"
              : "text-info", // Default to "text-info" for other cases
          content: "text-muted",
          confirmButton:
            iconx === "success"
              ? "btn btn-success"
              : iconx === "error"
              ? "btn btn-danger"
              : iconx === "warning"
              ? "btn btn-warning"
              : "btn btn-info", // Default to "btn btn-info" for other cases
        },
      }).then((result) => {
        if (result.isConfirmed) {
          const cktoday = new Date();
          const ckfd = cktoday.toLocaleDateString("th-TH"); // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
          const hours = cktoday.getHours().toString().padStart(2, "0");
          const minutes = cktoday.getMinutes().toString().padStart(2, "0");
          const seconds = cktoday.getSeconds().toString().padStart(2, "0");
          const ckfdtime = `${hours}:${minutes}:${seconds}`;

          if (iconx === "success" && ctype === "In") {
            localStorage.setItem("datecheck", ckfd);
            localStorage.setItem("datetimecheck", ckfdtime);
          } else if (
            (iconx === "info" && ctype === "Out") ||
            (iconx === "success" && ctype === "Out") ||
            (iconx === "warning" && ctype === "Out")
          ) {
            localStorage.setItem("datecheck", ckfd);
            localStorage.setItem("datecheckout", ckfd);
            localStorage.setItem("datetimecheckout", ckfdtime);
          }

          try {
            window.close();
            liff.closeWindow();
          } catch (error) {
            console.error("Failed to close window, refreshing...");
            window.location.reload(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏ó‡∏ô
          }
          // ‡πÉ‡∏ä‡πâ timeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤
          setTimeout(() => {
            location.reload(); // Refresh if liff.closeWindow() does not work
          }, 500); // ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ (500ms)
        }
      });
    });
  } catch (error) {
    // ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    Swal.fire({
      icon: "error",
      title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
      text: error.message || error, // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
      confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
    });
  } finally {
    // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
  }
}

function checkinfo() {
  let today = new Date();
  let formattedToday = today.toLocaleDateString("th-TH");

  let dateCheck = localStorage.getItem("datecheck");
  let timeCheck = localStorage.getItem("datetimecheck");
  let dateCheckout = localStorage.getItem("datecheckout");
  let timeCheckout = localStorage.getItem("datetimecheckout");

  if (
    (formattedToday === dateCheck && !dateCheckout) ||
    (formattedToday === dateCheck && formattedToday !== dateCheckout)
  ) {
    // Case: User has checked in but not yet checked out
    Swal.fire({
      title: "‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô",
      html:
        "‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <strong>" +
        dateCheck +
        "</strong> ‡πÄ‡∏ß‡∏•‡∏≤ <strong>" +
        timeCheck +
        " ‡∏ô.</strong> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      icon: "info",
      confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      showCloseButton: true,
      customClass: {
        title: "text-primary",
        content: "text-muted",
        confirmButton: "btn btn-primary",
      },
    });
  } else if (formattedToday === dateCheck && formattedToday === dateCheckout) {
    // Case: User has checked in and out
    Swal.fire({
      title: "‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô",
      html:
        "‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <strong>" +
        dateCheck +
        "</strong> ‡πÄ‡∏ß‡∏•‡∏≤ <strong>" +
        timeCheck +
        " ‡∏ô.</strong> ‡πÅ‡∏•‡∏∞‡πÑ‡∏î‡πâ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ <strong>" +
        timeCheckout +
        " ‡∏ô.</strong> ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
      icon: "success",
      confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      showCloseButton: true,
      customClass: {
        title: "text-success",
        content: "text-muted",
        confirmButton: "btn btn-success",
      },
    });
  } else if (
    (formattedToday != dateCheck && formattedToday === dateCheckout) ||
    (!dateCheck && formattedToday === dateCheckout)
  ) {
    // Case: User has checked in and out
    Swal.fire({
      title: "‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô",
      html:
        "‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà <strong>" +
        dateCheckout +
        "</strong> ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÇ‡∏î‡∏¢‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏¥‡∏Å‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ <strong>" +
        timeCheckout +
        " ‡∏ô.</strong>",
      icon: "warning",
      confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      showCloseButton: true,
      customClass: {
        title: "text-warning",
        content: "text-muted",
        confirmButton: "btn btn-warning",
      },
    });
  } else {
    Swal.fire({
      title: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô",
      html: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô<br>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô",
      icon: "error",
      confirmButtonText: "‡∏ï‡∏Å‡∏•‡∏á",
      showCloseButton: true,
      customClass: {
        title: "text-danger",
        content: "text-muted",
        confirmButton: "btn btn-danger",
      },
    }).then(() => {
      checktoday();
    });
  }
}



function alertUpdate() {
  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô local storage
  const logUpdate = localStorage.getItem("logUpdate");
 // console.log("logUpdate from localStorage:", logUpdate); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô console

  // ‡∏´‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ logUpdate ‡πÑ‡∏°‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 1 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ logUpdate
  if (logUpdate !== "1" || !logUpdate) {
  //  console.log("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

    // ‡πÅ‡∏™‡∏î‡∏á Swal.fire
    Swal.fire({
      title: "‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á",
      html: `<div style="text-align: left;">
      <ol style="padding-left: 20px; line-height: 1.8;">
        <li>‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ò‡∏µ‡∏°‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <i class="fa-solid fa-sun"></i> ‡∏Ç‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° <i class="fa-solid fa-bars"></i></li>
        <li>‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏î‡πâ ‡πÇ‡∏î‡∏¢‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° <i class="fa-solid fa-bars"></i> ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏°‡∏ô‡∏π <i class="fa-solid fa-gear"></i> ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á</li>
        <li>‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ</li>
      </ol>
    </div>
    
    `,
      input: "checkbox", // ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏™‡∏î‡∏á checkbox
      inputPlaceholder: "‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏µ‡∏Å", // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô input
      confirmButtonText: "‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö",
    }).then((result) => {
      if (result.isConfirmed) {
        // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Å‡∏î‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤ logUpdate = 1
        if (result.value) {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏µ‡∏Å
          localStorage.setItem("logUpdate", "1");
        //  console.log("logUpdate set to 1"); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        }
      }
    });
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á QR-code
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á QR Code
let qrVisible = false;
let qrCode = null;
let html5QrCode = new Html5Qrcode("reader");

function toggleQRCode() {
  const refid = localStorage.getItem("refid");
  const role = localStorage.getItem("role");
  if (role !== "ceo" && role !== "boss" && role !== "assure") {
    Swal.fire("‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR-code ‡πÑ‡∏î‡πâ!", "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤ ‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£ ‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ ‡∏ú‡∏π‡πâ‡∏ö‡∏£‡∏¥‡∏´‡∏≤‡∏£ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!", "error");
    return;
  }
  let qrname = "";

  const now = new Date();
  const hours = now.getHours();
  const minutes = now.getMinutes();
  const ckDate = now.toLocaleDateString("th-TH");

  if ((hours === 0 && minutes >= 0) || hours < 8 || (hours === 8 && minutes <= 30)) {
    qrname = "In|" + refid + "|" + ckDate;
  } else if ((hours >= 8 && hours < 16) || (hours === 16 && minutes < 30)) {
    Swal.fire("‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ !", "‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á QR-code ‡πÑ‡∏î‡πâ ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 8.31 - 16.29 ‡∏ô. !", "error");
    return;
  } else {
    qrname = "Out|" + refid + "|" + ckDate;
  }

  let encodedQR = btoa(qrname);
  let qrDiv = document.getElementById("qrcode");
  let readerDiv = document.getElementById("reader");
  let button = document.getElementById("button-qr");

  if (!qrVisible) {
    qrDiv.style.display = "block";
    readerDiv.style.display = "none";
    stopScanner();

    if (!qrCode) {
      qrCode = new QRCode(qrDiv, {
        text: encodedQR,
        width: 200,
        height: 200,
      });
    }
    button.textContent = "‡∏ã‡πà‡∏≠‡∏ô QR Code";
  } else {
    qrDiv.style.display = "none";
    readerDiv.style.display = "block";
    button.textContent = "‡πÅ‡∏™‡∏î‡∏á QR Code";
    startScan();
  }
  qrVisible = !qrVisible;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô QR Code
function startScan() {
  let readerDiv = document.getElementById("reader");
  readerDiv.style.display = "block";

  html5QrCode
    .start(
      { facingMode: "environment" },
      { fps: 10, qrbox: { width: 200, height: 200 } },
      onScanSuccess,
      onScanFailure
    )
    .catch(() => {
      Swal.fire({
        icon: "error",
        title: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ",
        text: "‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á",
      });
    });
}

function stopScanner() {
  if (html5QrCode.isScanning) {
    html5QrCode.stop().then(() => {
      console.log("‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
    }).catch(() => {
      Swal.fire({
        icon: "error",
        title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
      });
    });
  }
}

function isBase64(str) {
  try {
    return btoa(atob(str)) === str; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏´‡∏°
  } catch (err) {
    return false; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Base64
  }
}

function onScanSuccess(decodedText) {
  stopScanner();

  if (!isBase64(decodedText)) {
    Swal.fire({
      icon: "error",
      title: "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
      html: 'QR Code ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ Base64',
      showDenyButton: true,
      confirmButtonText: "‡∏õ‡∏¥‡∏î",
      denyButtonText: "‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà",
      customClass: {
        title: "text-danger",
        content: "text-muted",
        confirmButton: "btn btn-danger",
        denyButton: "btn btn-primary",
      },
      footer: `‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå : <a href="#">${decodedText}</a>`
    }).then((result) => {
      if (result.isDenied) {
        startScan();
      }
    });
    return;
  }

  try {
    const decodedBase64 = atob(decodedText);
    const splitStr = decodedBase64.split("|");

    if (splitStr.length < 3) {
      throw new Error("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
    }

    let part1 = splitStr[0];
    let part2 = splitStr[1];
    let part3 = splitStr[2];

    if (part1 !== 'In' && part1 !== 'Out') {
      Swal.fire({
        icon: "error",
        title: "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
        html: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n' + decodedBase64,
        showDenyButton: true,
        confirmButtonText: "‡∏õ‡∏¥‡∏î",
        denyButtonText: "‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà",
        customClass: {
          title: "text-danger",
          content: "text-muted",
          confirmButton: "btn btn-danger",
          denyButton: "btn btn-primary",
        },
      }).then((result) => {
        if (result.isDenied) {
          startScan();
        }
      });
      return;
    }
  
    const boss = localStorage.getItem("boss");
    const ceo = localStorage.getItem("ceo");
   
    if (boss !== part2 && ceo !== part2) {

      Swal.fire({
        icon: "error",
        title: "‡∏£‡∏´‡∏±‡∏™‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á!",
        html: "‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤",
        showDenyButton: true,
        // showCancelButton: true,
        confirmButtonText: "‡∏õ‡∏¥‡∏î",
        denyButtonText: "‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà",
        customClass: {
          title: "text-danger",
          content: "text-muted",
          confirmButton: "btn btn-danger",
          denyButton: "btn btn-primary",
        },
        footer: '<a href="https://wisanusenhom.github.io/sekatime/user.html">‡∏Å‡∏≥‡∏´‡∏ô‡∏î ‡∏´‡∏±‡∏ß‡∏´‡∏ô‡πâ‡∏≤/‡∏ú‡∏π‡πâ‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Å‡∏≤‡∏£</a>'
      }).then((result) => {
        if (result.isConfirmed) {
         //
        } else if (result.isDenied) {
          startScan();
        }
      });

      return;
    }
  
    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    let formattedToday = now.toLocaleDateString("th-TH");
  
    if (formattedToday !== part3) {
      Swal.fire({
        icon: "error",
        title: "‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô!",
        html: part3,
        showDenyButton: true,
        // showCancelButton: true,
        confirmButtonText: "‡∏õ‡∏¥‡∏î",
        denyButtonText: "‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà",
        customClass: {
          title: "text-danger",
          content: "text-muted",
          confirmButton: "btn btn-danger",
          denyButton: "btn btn-primary",
        },
      }).then((result) => {
        if (result.isConfirmed) {
         //
        } else if (result.isDenied) {
          startScan();
        }
      });
      return;
    }
  
    const latitude = localStorage.getItem("oflat");
    const longitude = localStorage.getItem("oflong");
    const ctype = part1;
    const staff = part2;
  
    if (part3 === localStorage.getItem("datecheck") || part3 === localStorage.getItem("datecheckout")) {
      checkinfo();  
    } else {
      if (((hours === 0 && minutes >= 0) || hours < 8 || (hours === 8 && minutes <= 30)) && part1 === 'In') {
        // ‡∏°‡∏≤
        Swal.fire({
          title: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
          html: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
          showDenyButton: true,
          showCancelButton: true,
          confirmButtonText: "‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤",
          denyButtonText: "‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà",
          customClass: {
            title: "text-success",
            content: "text-muted",
            confirmButton: "btn btn-success",
            denyButton: "btn btn-primary",
          },
        }).then((result) => {
          if (result.isConfirmed) {
            processCheckinOrCheckout(ctype, latitude, longitude,staff);
          } else if (result.isDenied) {
            startScan();
          }
        });
  
      } else if ((hours >= 8 && hours < 16) || (hours === 16 && minutes < 30)) {
          Swal.fire({
          icon: "warning",
          title: "‡πÇ‡∏õ‡∏£‡∏î‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤",
          html: "‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 08:31 - 16:29 ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ",
          showDenyButton: true,
          showCancelButton: true,
          confirmButtonText: "‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠",
          denyButtonText: "‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà",
          customClass: {
            title: "text-success",
            content: "text-muted",
            confirmButton: "btn btn-danger",
            denyButton: "btn btn-primary",
          },
        }).then((result) => {
          if (result.isConfirmed) {
            window.location.href = "request.html";
          } else if (result.isDenied) {
            startScan();
          }
        });
      } else if (part1 === 'Out') {
        // ‡∏Å‡∏•‡∏±‡∏ö
        Swal.fire({
          title: "‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?",
          html: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£",
          showDenyButton: true,
          showCancelButton: true,
          confirmButtonText: "‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏°‡∏≤",
          denyButtonText: "‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà",
          customClass: {
            title: "text-danger",
            content: "text-muted",
            confirmButton: "btn btn-danger",
            denyButton: "btn btn-primary",
          },
        }).then((result) => {
          if (result.isConfirmed) {
            processCheckinOrCheckout(ctype, latitude, longitude,staff);
          } else if (result.isDenied) {
            startScan();
          }
        });
      }else{
        Swal.fire({
          icon: "error",
          title: "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
          html: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ',
          showDenyButton: true,
          // showCancelButton: true,
          confirmButtonText: "‡∏õ‡∏¥‡∏î",
          denyButtonText: "‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà",
          customClass: {
            title: "text-danger",
            content: "text-muted",
            confirmButton: "btn btn-danger",
            denyButton: "btn btn-primary",
          },
        }).then((result) => {
          if (result.isConfirmed) {
           //
          } else if (result.isDenied) {
            startScan();
          }
        });
      return;
      }    
    }
  } catch (error) {
    Swal.fire({
      icon: "error",
      title: "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!",
      html: 'QR Code ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',
      showDenyButton: true,
      confirmButtonText: "‡∏õ‡∏¥‡∏î",
      denyButtonText: "‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà",
      customClass: {
        title: "text-danger",
        content: "text-muted",
        confirmButton: "btn btn-danger",
        denyButton: "btn btn-primary",
      },
    }).then((result) => {
      if (result.isDenied) {
        startScan();
      }
    });
  }
}

function onScanFailure() {
  // Swal.fire({
  //   icon: "warning",
  //   title: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
  //   text: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
  //   timer: 2000,
  //   showConfirmButton: false,
  // });
}


// ‡∏Ç‡∏≠‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
async function requestNotificationPermission() {
    if (Notification.permission !== "granted") {
        await Notification.requestPermission();
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
function showNotification() {
    let nows = new Date();
    let formatToday = nows.toLocaleDateString("th-TH");

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏¢‡∏õ‡∏¥‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (localStorage.getItem("datecheck") === formatToday || localStorage.getItem("notifiedToday") === formatToday) {
        console.log("‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡∏Å");
        return;
    }

    if (Notification.permission === "granted") {
        let options = {
            body: "üíº ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà",
            icon: "https://lh5.googleusercontent.com/d/15oBJkXkg-WVElsZb6a-BlRx8CyPP0_Q5",
        };

        let notification = new Notification("üö® „Äê ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç „Äë üö®", options);

        // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        notification.onclick = () => {
            window.open("https://wisanusenhom.github.io/nu/?checkin=true", "_blank");
            notification.close();
            localStorage.setItem("notifiedToday", formatToday); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        };

        // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡∏¥‡∏î‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏≠‡∏á
        notification.onclose = () => {
            localStorage.setItem("notifiedToday", formatToday); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß
        };
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (06:00 - 08:00 ‡∏ô.)
function startNotificationScheduler() {
    setInterval(() => {
        let now = new Date();
        let hours = now.getHours();
        let minutes = now.getMinutes();

        // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 06:00 - 08:00 ‡∏ô. ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        if (hours >= 6 && hours < 8 && minutes % 10 === 0) {
            showNotification();
        }
    }, 60 * 1000); // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 1 ‡∏ô‡∏≤‡∏ó‡∏µ
}

// ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
document.addEventListener("DOMContentLoaded", function () {
    const urlParams = new URLSearchParams(window.location.search);
    let nows = new Date();
    let formatToday = nows.toLocaleDateString("th-TH");

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏¢‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (localStorage.getItem("datecheck") === formatToday) {
        console.log("‚úÖ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô");
        return;
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå checkin=true ‡πÉ‡∏´‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    if (urlParams.has('checkin') && urlParams.get('checkin') === 'true') {
        console.log("‚úÖ ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:", formatToday);
    }
});

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
requestNotificationPermission().then(() => {
    startNotificationScheduler();
});
